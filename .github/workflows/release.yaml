name: Release PlemolSC Fonts

on:
  push:
    tags:
      - "v*" # Trigger on tags like v1.0, v1.2.3, v2024.05.25
  workflow_dispatch: # Allows manual triggering
    inputs:
      version_tag:
        description: "Optional: Specify a version tag for this manual build (e.g., manual-build-20240525). If empty, a unique name based on run ID will be used."
        required: false
        type: string

env:
  # Define a local tag for the Docker image, used within the job
  DOCKER_IMAGE_LOCAL_TAG: plemolsc-builder:local-build

jobs:
  build-and-release:
    name: Build Fonts and Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create GitHub releases

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history, useful if release notes are generated from commit messages

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image locally
        uses: docker/build-push-action@v5
        with:
          context: . # Assumes Dockerfile is in the root of your repository
          file: ./Dockerfile # Path to your Dockerfile
          load: true # Load the image into the local Docker daemon
          push: false # Do not push the image to a registry
          tags: ${{ env.DOCKER_IMAGE_LOCAL_TAG }} # Tag the image locally

      - name: Determine Release Version and Tag
        id: version_info
        run: |
          VERSION_TAG=""
          RELEASE_NAME_SUFFIX=""
          IS_PRERELEASE="false" # Default to false

          if [[ "${{ github.event_name }}" == "push" && $(echo "${{ github.ref }}" | grep -q "refs/tags/"; echo $?) -eq 0 ]]; then
            VERSION_TAG="${{ github.ref_name }}" # e.g., v1.0.0
            RELEASE_NAME_SUFFIX="${{ github.ref_name }}"
            if [[ "${{ github.ref_name }}" == *"-beta"* || "${{ github.ref_name }}" == *"-alpha"* || "${{ github.ref_name }}" == *"-rc"* ]]; then
              IS_PRERELEASE="true"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ -n "${{ github.event.inputs.version_tag }}" ]]; then
              VERSION_TAG="${{ github.event.inputs.version_tag }}"
              RELEASE_NAME_SUFFIX="${{ github.event.inputs.version_tag }}"
            else
              VERSION_TAG="manual-build-${{ github.run_id }}-${{ github.sha }}"
              RELEASE_NAME_SUFFIX="Manual Build (${{ github.run_id }})"
            fi
            IS_PRERELEASE="true"
          else
            echo "Error: Could not determine version for release. Workflow should be triggered by a tag push or manually."
            exit 1
          fi

          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=PlemolSC ${RELEASE_NAME_SUFFIX}" >> $GITHUB_OUTPUT
          echo "IS_PRERELEASE=${IS_PRERELEASE}" >> $GITHUB_OUTPUT

      - name: Create build output directory on host
        run: mkdir -p ${{ github.workspace }}/build_output_on_host

      - name: Run build_all.sh in Docker
        run: |
          docker run --rm \
            -v "${{ github.workspace }}/build_output_on_host:/app/build" \
            ${{ env.DOCKER_IMAGE_LOCAL_TAG }} \
            /app/build_all.sh

      - name: Prepare Release Artifacts
        id: prep_artifacts
        run: |
          ARTIFACT_STAGING_DIR="${{ github.workspace }}/release_zips_for_upload"
          BUILT_FONTS_DIR="${{ github.workspace }}/build_output_on_host/release"

          mkdir -p "$ARTIFACT_STAGING_DIR"

          if [ ! -d "$BUILT_FONTS_DIR" ] || [ -z "$(ls -A $BUILT_FONTS_DIR)" ]; then
            echo "Error: Build output directory '$BUILT_FONTS_DIR' is empty or not found on the host."
            exit 1
          fi

          echo "Found built font variant directories in $BUILT_FONTS_DIR:"
          ls -l "$BUILT_FONTS_DIR"

          # Store the current directory to return to it later
          ORIGINAL_DIR=$(pwd)
          cd "$BUILT_FONTS_DIR" # Change directory to where the variant folders are

          for VARIANT_SUBDIR_BASENAME in */; do
            if [ -d "$VARIANT_SUBDIR_BASENAME" ]; then
              # Remove trailing slash to get the clean directory name for the ZIP file
              ACTUAL_VARIANT_NAME="${VARIANT_SUBDIR_BASENAME%/}"
              echo "Zipping contents of '$ACTUAL_VARIANT_NAME'..."

              # Use a subshell to 'cd' into the variant directory, create the zip, then return.
              # This keeps the main loop's 'pwd' context in $BUILT_FONTS_DIR.
              ( \
                cd "$ACTUAL_VARIANT_NAME" && \
                zip -r "${ARTIFACT_STAGING_DIR}/${ACTUAL_VARIANT_NAME}.zip" . \
              )
              # Check if zip was successful (subshell will inherit set -e, or check $? if needed)
              if [ $? -eq 0 ]; then
                echo "Created ${ARTIFACT_STAGING_DIR}/${ACTUAL_VARIANT_NAME}.zip"
              else
                echo "Error: Failed to zip '$ACTUAL_VARIANT_NAME'."
                # Optionally exit here if one zip fails: exit 1
              fi
            fi
          done
          cd "$ORIGINAL_DIR" # Return to the original workspace directory

          if [ -z "$(ls -A $ARTIFACT_STAGING_DIR)" ]; then
            echo "Error: No ZIP files were created in $ARTIFACT_STAGING_DIR."
            exit 1
          fi
          echo "All ZIP artifacts prepared for upload in $ARTIFACT_STAGING_DIR:"
          ls -l "$ARTIFACT_STAGING_DIR"
          echo "ARTIFACT_PATH=${ARTIFACT_STAGING_DIR}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version_info.outputs.VERSION_TAG }}
          name: ${{ steps.version_info.outputs.RELEASE_NAME }}
          body: |
            Automated release of PlemolSC font variants.
            Built from commit ${{ github.sha }}.
            For the detail of the base fonts used, please refer to [Release Notes](https://github.com/yilinfang/PlemolSC/blob/main/RELEASE_NOTES.md).
            For the detail of each variant, please refer to initial [README](https://github.com/yilinfang/PlemolSC/blob/main/README_PlemolJP.md) of [PlemolJP](https://github.com/yuru7/PlemolJP).
          files: ${{ steps.prep_artifacts.outputs.ARTIFACT_PATH }}/*.zip
          draft: false
          prerelease: ${{ steps.version_info.outputs.IS_PRERELEASE }}
